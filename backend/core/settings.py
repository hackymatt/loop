"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path
import os
import base64
import json
from socket import gethostbyname, gethostname
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-1%@y^a@2yaw8y#f#3&o%ov4hy9e#eu#-mi$92d3n=+v1v%rgvf"
)

# SECURITY WARNING: don't run with debug turned on in production!
ENV = os.getenv("ENV", "LOCAL")
LOCAL = os.getenv("LOCAL", "True") == "True"
DEBUG = LOCAL

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "http://localhost").split(",")

SECURE_HSTS_SECONDS = 2_592_000  # 30 days
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("X-FORWARDED-PROTO", "https")
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

ALLOWED_HOSTS = os.getenv("ALLOWED_HOST", "localhost").split(",")
ALLOWED_HOSTS.append(gethostbyname(gethostname()))

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_cleanup.apps.CleanupConfig",
    "django_filters",
    "django_crontab",
    "dbbackup",
    "corsheaders",
    "rest_framework",
    "utils.filtering",
    "profile",
    "technology",
    "lesson",
    "skill",
    "topic",
    "course",
    "review",
    "purchase",
    "newsletter",
    "schedule",
    "wishlist",
    "cart",
    "teaching",
    "reservation",
    "finance",
    "coupon",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.MultiPartParser",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "utils.filtering.backends.ComplexFilterBackend",
        "rest_framework.filters.SearchFilter",
    ),
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_PAGINATION_CLASS": "utils.pagination.pagination.CustomPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "500/hour", "user": "1000/hour"},
}

if not DEBUG:
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = (
        "rest_framework.renderers.JSONRenderer",
    )  # pragma: no cover

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "mailer", "templates"),
            os.path.join(BASE_DIR, "utils", "filtering", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "loop"),
        "USER": os.getenv("DB_USER", "loop_dev"),
        "PASSWORD": os.getenv("DB_PASSWORD", "loop_devpassword"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}

# Cache
# https://docs.djangoproject.com/en/5.0/topics/cache/
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.getenv("REDIS_URL", "redis://redis:6379/0"),
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Database backup
DBBACKUP_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
DBBACKUP_STORAGE_OPTIONS = {
    "access_key": os.getenv("S3_ACCESS_KEY", ""),
    "secret_key": os.getenv("S3_SECRET_KEY", ""),
    "bucket_name": "db-backup",
    "region_name": "FRA1",
    "default_acl": "private",
    "endpoint_url": "https://objectstore.fra1.civo.com",
    "location": ENV,
}

DBBACKUP_FREQ = {"DEV": "0 0 * * *", "UAT": "0 0 * * *", "PROD": "0 * * * *"}

CRONJOBS = (
    [
        (DBBACKUP_FREQ[ENV], "core.cron.create_backup"),
        ("*/30 * * * *", "core.cron.confirm_lessons"),
        ("*/30 * * * *", "core.cron.remind_lessons_review"),
    ]
    if not LOCAL
    else []
)


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "pl-PL"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

if LOCAL:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    STATIC_URL = "/static/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"
else:
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "access_key": os.getenv("S3_ACCESS_KEY", ""),
                "secret_key": os.getenv("S3_SECRET_KEY", ""),
                "bucket_name": "files",
                "region_name": "FRA1",
                "default_acl": "public-read",
                "endpoint_url": "https://objectstore.fra1.civo.com",
                "location": f"{ENV}/media" if ENV != "PROD" else "media",
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "access_key": os.getenv("S3_ACCESS_KEY", ""),
                "secret_key": os.getenv("S3_SECRET_KEY", ""),
                "bucket_name": "files",
                "region_name": "FRA1",
                "default_acl": "public-read",
                "endpoint_url": "https://objectstore.fra1.civo.com",
                "location": f"{ENV}/static" if ENV != "PROD" else "static",
            },
        },
    }  # pragma: no cover

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CONTACT_EMAIL = os.getenv("CONTACT_EMAIL", "")
EMAIL_FROM = os.getenv("EMAIL_FROM", "")
GOOGLE_CREDENTIALS = json.loads(
    base64.urlsafe_b64decode(os.getenv("GOOGLE_CREDENTIALS", "e30=")).decode()
)

ADMIN_EMAIL = os.getenv("ADMIN_EMAIL", "")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "")

DUMMY_STUDENT_EMAIL = os.getenv("DUMMY_STUDENT_EMAIL", "")
DUMMY_STUDENT_PASSWORD = os.getenv("DUMMY_STUDENT_PASSWORD", "")
DUMMY_LECTURER_EMAIL = os.getenv("DUMMY_LECTURER_EMAIL", "")
DUMMY_LECTURER_PASSWORD = os.getenv("DUMMY_LECTURER_PASSWORD", "")

BASE_FRONTEND_URL = os.environ.get("BASE_URL", "http://localhost")

GOOGLE_CLIENT_ID = os.environ.get("GOOGLE_CLIENT_ID", "")
GOOGLE_CLIENT_SECRET = os.environ.get("GOOGLE_CLIENT_SECRET", "")

FACEBOOK_CLIENT_ID = os.environ.get("FACEBOOK_CLIENT_ID", "")
FACEBOOK_CLIENT_SECRET = os.environ.get("FACEBOOK_CLIENT_SECRET", "")

GITHUB_CLIENT_ID = os.environ.get("GITHUB_CLIENT_ID", "")
GITHUB_CLIENT_SECRET = os.environ.get("GITHUB_CLIENT_SECRET", "")

GITHUB_REPO = os.environ.get("GITHUB_REPO", "")

PAYMENT_SERVER = os.environ.get("PAYMENT_SERVER", "https://sandbox.przelewy24.pl")
PAYMENT_MERCHANT_ID = int(os.environ.get("PAYMENT_MERCHANT_ID", "-1"))
PAYMENT_STORE_ID = os.environ.get("PAYMENT_STORE_ID", "-1")
PAYMENT_CRC = os.environ.get("PAYMENT_CRC", "")
PAYMENT_API_KEY = os.environ.get("PAYMENT_API_KEY", "")
