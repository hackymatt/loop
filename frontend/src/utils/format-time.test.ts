import { fDate, fTime, fToNow, isAfter, fDateTime, isBetween, fTimestamp } from "./format-time";

describe("fDate", () => {
  // Returns a formatted date string when given a valid date input.
  it("should return a formatted date string when given a valid date input", () => {
    const date = new Date(2022, 0, 1);
    const result = fDate(date);
    expect(result).toBe("01 stycznia 2022");
  });

  // Returns an empty string when given an invalid date input.
  it("should return an empty string when given an invalid date input", () => {
    const date = undefined;
    const result = fDate(date);
    expect(result).toBe("");
  });
});

// Generated by CodiumAI

describe("fTimestamp", () => {
  // Returns the timestamp in milliseconds when given a valid date string.
  it("should return the timestamp in milliseconds when given a valid date string", () => {
    const date = new Date("2022-01-01T00:00:00Z");
    const result = fTimestamp(date);
    expect(result).toBe(date.getTime());
  });

  // Returns an empty string when given an invalid date string.
  it("should return an empty string when given an invalid date string", () => {
    const date = "invalid";
    const result = fTimestamp(date);
    expect(result).toBe(NaN);
  });
});

// Generated by CodiumAI

describe("fToNow", () => {
  // Returns an empty string when input is null or undefined
  it("should return an empty string when input is null", () => {
    const result = fToNow(null);
    expect(result).toBe("");
  });

  // Returns 'Invalid Date' when input is an invalid date string
  it("should return Invalid Date when input is an invalid date string", () => {
    const result = fToNow(undefined);
    expect(result).toBe("");
  });
});

// Generated by CodiumAI

describe("isAfter", () => {
  // When startDate is after endDate, it returns true
  it("should return true when startDate is after endDate", () => {
    const startDate = new Date(2022, 0, 1);
    const endDate = new Date(2021, 0, 1);

    const result = isAfter(startDate, endDate);

    expect(result).toBe(true);
  });

  // When startDate is null and endDate is null, it returns false
  it("should return false when startDate is null and endDate is null", () => {
    const startDate = null;
    const endDate = null;

    const result = isAfter(startDate, endDate);

    expect(result).toBe(false);
  });
});

// Generated by CodiumAI

describe("isBetween", () => {
  // Returns true if inputDate is between startDate and endDate
  it("should return true when inputDate is between startDate and endDate", () => {
    const inputDate = new Date(2022, 0, 15);
    const startDate = new Date(2022, 0, 10);
    const endDate = new Date(2022, 0, 20);

    const result = isBetween(inputDate, startDate, endDate);

    expect(result).toBe(true);
  });

  // Returns false if inputDate is before startDate
  it("should return false when inputDate is before startDate", () => {
    const inputDate = new Date(2022, 0, 5);
    const startDate = new Date(2022, 0, 10);
    const endDate = new Date(2022, 0, 20);

    const result = isBetween(inputDate, startDate, endDate);

    expect(result).toBe(false);
  });
});

// Generated by CodiumAI

describe("fDateTime", () => {
  // Returns a formatted date string when given a valid date input.
  it("should return a formatted date string when given a valid date input", () => {
    const date = new Date(2022, 0, 1);
    const result = fDateTime(date);
    expect(result).toBe("01 sty 2022 00:00");
  });

  // Returns an empty string when given an invalid date input.
  it("should return an empty string when given an invalid date input", () => {
    const date = undefined;
    const result = fDateTime(date);
    expect(result).toBe("");
  });
});

// Generated by CodiumAI

describe("fTime", () => {
  // Returns formatted time string for valid input date
  it("should return formatted time string when valid input date is provided", () => {
    const date = new Date(2022, 0, 1, 12, 30, 0);
    const result = fTime(date);
    expect(result).toBe("12:30");
  });

  // Returns empty string for invalid input date string
  it("should return empty string when invalid input date string is provided", () => {
    const date = undefined;
    const result = fTime(date);
    expect(result).toBe("");
  });
});
